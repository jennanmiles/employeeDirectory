{"version":3,"sources":["components/Navbar/index.js","components/Footer/index.js","components/EmployeeCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Footer","EmployeeCard","props","firstname","lastname","age","occupation","location","App","document","getElementById","updateSearch","e","console","log","target","value","searchTerm","toLowerCase","arr","i","employees","length","indexOf","push","setState","searchFilter","toggleDropdown","filteredEmployees","filter","a","selectedFilter","state","type","id","this","onChange","Form","Control","as","map","employee","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"imDAaeA,MAVf,WACI,OACI,6BACI,yBAAKC,UAAU,UACf,qD,MCMGC,MAVf,WACI,OACI,6BACI,yBAAKD,UAAU,UACf,6D,MCWGE,MAdf,SAAuBC,GACnB,OACI,6BACI,yBAAKH,UAAU,gBACX,2BAAIG,EAAMC,WACV,2BAAID,EAAME,UACV,2BAAIF,EAAMG,KACV,2BAAIH,EAAMI,YACV,2BAAIJ,EAAMK,a,eCyGXC,GA5GCC,SAASC,eAAe,U,kDAItC,WAAYR,GAAO,IAAD,8BAChB,cAAMA,IAQRS,aAAe,SAACC,GAEdC,QAAQC,IAAIF,EAAEG,OAAOC,OAMrB,IAJA,IAAMC,EAAaL,EAAEG,OAAOC,MAAME,cAE9BC,EAAM,GAEDC,EAAI,EAAGA,EAAIC,EAAUC,OAAQF,KAE8B,IAA9DC,EAAUD,GAAGjB,UAAUe,cAAcK,QAAQN,KAAmF,IAA7DI,EAAUD,GAAGhB,SAASc,cAAcK,QAAQN,KAAqF,IAA/DI,EAAUD,GAAGd,WAAWY,cAAcK,QAAQN,IACrLE,EAAIK,KAAKH,EAAUD,IAGvBP,QAAQC,IAAIK,GACZ,EAAKM,SAAS,CACZC,aAAcd,EAAEG,OAAOC,MACvBK,UAAWF,KA1BG,EA+BlBQ,eAAkB,SAAAf,GAChBC,QAAQC,IAAIF,EAAEG,OAAOC,OAIrB,GAAuB,QAAnBJ,EAAEG,OAAOC,MAAb,CAQA,IAAMY,EAAoBP,EAAUQ,QAAO,SAACC,EAAEV,GAC5C,OAAOU,EAAExB,aAAeM,EAAEG,OAAOC,SAGnC,EAAKS,SAAS,CACZM,eAAgBnB,EAAEG,OAAOC,MACzBK,UAAWO,IAEbf,QAAQC,IAlBI,SAGV,EAAKW,SAAS,CACZM,eAAgBnB,EAAEG,OAAOC,MACzBK,UAAWA,KArCf,EAAKW,MAAQ,CACXN,aAAc,GACdL,UAAWA,EACXU,eAAgB,IALF,E,qDA0DlB,OAEE,6BACE,kBAAC,EAAD,MACA,yBAAKhC,UAAU,WACb,mEAEA,yBAAKA,UAAU,iBACb,2CACA,2BAAOkC,KAAK,OAAOC,GAAG,SACtBlB,MAAOmB,KAAKH,MAAMN,aAClBU,SAAUD,KAAKxB,gBAGjB,kBAAC0B,EAAA,EAAKC,QAAN,CAAcC,GAAG,SAASvB,MAAOmB,KAAKH,MAAMD,eAAgBG,GAAG,WAAWE,SAAUD,KAAKR,gBACzF,4BAAQX,MAAM,OAAd,sBACE,4BAAQA,MAAM,iBAAd,kBACA,4BAAQA,MAAM,oBAAd,qBACA,4BAAQA,MAAM,mBAAd,oBACA,4BAAQA,MAAM,kBAAd,oBAGF,yBAAKjB,UAAU,kBACb,0CACA,yCACA,mCACA,0CACA,yCAGDoC,KAAKH,MAAMX,UAAUmB,KAAI,SAAAC,GAAQ,OAChC,kBAAC,EAAD,CACEtC,UAAWsC,EAAStC,UACpBC,SAAUqC,EAASrC,SACnBC,IAAKoC,EAASpC,IACdC,WAAYmC,EAASnC,WACrBC,SAAUkC,EAASlC,eAIzB,kBAAC,EAAD,W,GApGYmC,cCCEC,QACW,cAA7BC,OAAOrC,SAASsC,UAEe,UAA7BD,OAAOrC,SAASsC,UAEhBD,OAAOrC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASC,eAAe,SDyHpB,kBAAmBwC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.c944417b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nfunction Navbar () {\n    return (\n        <div> \n            <div className=\"navbar\">\n            <h1>Employee Directory</h1> \n            </div>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Footer () {\n    return (\n        <div> \n            <div className=\"footer\">\n            <h5>lorem ipsum dolor sit amet</h5> \n            </div>\n        </div>\n    )\n}\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction EmployeeCard (props) {\n    return (\n        <div> \n            <div className=\"employeeCard\">\n                <p>{props.firstname}</p>\n                <p>{props.lastname}</p>\n                <p>{props.age}</p>\n                <p>{props.occupation}</p>\n                <p>{props.location}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default EmployeeCard;","import React, {Component} from 'react';\nimport {Form, FormControl} from 'react-bootstrap';\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport EmployeeCard from \"./components/EmployeeCard\";\nimport './App.css';\nimport employees from \"./employees.json\";\n\n// variables\nlet searchBar = document.getElementById('filter');\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props)\n    this.state = {\n      searchFilter: '',\n      employees: employees,\n      selectedFilter: ''\n    }\n  }\n\n  updateSearch = (e) => {\n\n    console.log(e.target.value);\n    //\n    const searchTerm = e.target.value.toLowerCase();\n\n    let arr = []\n\n    for (let i = 0; i < employees.length; i++) {\n\n     if ( employees[i].firstname.toLowerCase().indexOf(searchTerm) !== -1 || employees[i].lastname.toLowerCase().indexOf(searchTerm) !== -1 || employees[i].occupation.toLowerCase().indexOf(searchTerm) !== -1) {\n        arr.push(employees[i])\n      } \n    }\n    console.log(arr)\n    this.setState({\n      searchFilter: e.target.value,\n      employees: arr\n    })\n\n  }\n\n  toggleDropdown  = e => {\n    console.log(e.target.value); \n\n    const arr = []\n    \n    if (e.target.value === 'all') {\n      this.setState({\n        selectedFilter: e.target.value,\n        employees: employees\n      }) \n      return \n    }\n\n    const filteredEmployees = employees.filter((a,i) => {\n      return a.occupation === e.target.value;\n    })\n\n    this.setState({\n      selectedFilter: e.target.value, \n      employees: filteredEmployees\n    }) \n    console.log(arr);\n  }\n\n\n  render() {\n   \n  return (\n    \n    <div>  \n      <Navbar />\n      <div className=\"wrapper\">\n        <h2>Here is a list of current employees</h2>\n        {/* search options below */}\n        <div className=\"searchWrapper\">\n          <label>Search: </label>\n          <input type=\"text\" id=\"filter\"\n          value={this.state.searchFilter}\n          onChange={this.updateSearch} />\n        </div>\n        \n        <Form.Control as=\"select\" value={this.state.selectedFilter} id=\"dropdown\" onChange={this.toggleDropdown}>\n        <option value=\"all\">Select Occupation:</option>\n          <option value=\"web developer\">web developers</option>\n          <option value=\"graphic designer\">graphic designers</option>\n          <option value=\"account manager\">account managers</option>\n          <option value=\"content writer\">content writers</option>\n        </Form.Control>\n        \n        <div className=\"employeeTitles\">\n          <h3>First Name</h3>\n          <h3>Last Name</h3>\n          <h3>Age</h3>\n          <h3>Occupation</h3>\n          <h3>Location</h3>\n        </div>\n        \n        {this.state.employees.map(employee => (\n          <EmployeeCard\n            firstname={employee.firstname}\n            lastname={employee.lastname}\n            age={employee.age}\n            occupation={employee.occupation}\n            location={employee.location}\n          />\n        ))}\n      </div>\n      <Footer /> \n      </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}